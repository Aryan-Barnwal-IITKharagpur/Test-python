# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fy56BCso7Lel7zHjiYbwvEtvmCtRdwWT
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
from sklearn.decomposition import PCA

# Load dataset
df = pd.read_csv("diabetic_data.csv")

# Drop ID columns
df = df.drop(["encounter_id", "patient_nbr"], axis=1)

# Drop the target column for clustering
df_cluster = df.drop("readmitted", axis=1)

# Identify numeric and categorical features
numeric_features = df_cluster.select_dtypes(include=["int64", "float64"]).columns
categorical_features = df_cluster.select_dtypes(include=["object"]).columns

# Numeric pipeline
numeric_transformer = Pipeline([
    ("imputer", SimpleImputer(strategy="median")),
    ("scaler", StandardScaler())
])

# Categorical pipeline
categorical_transformer = Pipeline([
    ("imputer", SimpleImputer(strategy="most_frequent")),
    ("encoder", OneHotEncoder(handle_unknown="ignore"))
])

# Combine preprocessing
preprocessor = ColumnTransformer([
    ("num", numeric_transformer, numeric_features),
    ("cat", categorical_transformer, categorical_features)
])

# Apply preprocessing
X = preprocessor.fit_transform(df_cluster)
X = X.toarray() if hasattr(X, "toarray") else X

# Optional: reduce dimensions for visualization
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)

# Define clustering algorithms
cluster_models = {
    "KMeans": KMeans(n_clusters=3, random_state=42),
    "DBSCAN": DBSCAN(eps=3, min_samples=5),
    "Agglomerative": AgglomerativeClustering(n_clusters=3)
}

# Fit clustering models and visualize
for name, model in cluster_models.items():
    clusters = model.fit_predict(X)
    plt.figure(figsize=(6, 4))
    plt.scatter(X_pca[:, 0], X_pca[:, 1], c=clusters, cmap="tab10", s=50)
    plt.title(f"{name} Clusters (2D PCA Projection)")
    plt.xlabel("PCA Component 1")
    plt.ylabel("PCA Component 2")
    plt.show()